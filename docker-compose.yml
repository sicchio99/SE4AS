version: '3.8'

services:

  #Message Broker
  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: mosquitto_container_test
    volumes:
      - ./mosquitto.conf:/mosquitto/config/mosquitto.conf
    restart: always
    #networks:
      #- test_network
    ports:
      - '1883:1883'
      - '9001:9001'

  #Database
  redis:
    image: redis:latest
    container_name: redis_container
    ports:
      - "6379:6379"
    #Comando per avviare il DB senza persistenza -> db vuoto ad ogni avvio
    #command: [ "redis-server", "--appendonly", "no", "--save", "", "--dir", "/data" ]
    volumes:
      - redis_data:/data

  #Grafana
  grafana:
    image: grafana/grafana
    container_name: grafana_container
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    restart: always
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - redis


  #MAPE-K components

  monitor:
    build:
      context: ./Monitor
      dockerfile: Dockerfile
    container_name: seas_monitor_test
    restart: always
    #networks:
      #- test_network
    depends_on:
      - mosquitto
      - redis

  analyzer:
    build:
      context: ./Analyzer
      dockerfile: Dockerfile
    container_name: seas_analyzer_test
    restart: always
    #networks:
      #- test_network
    depends_on:
      - mosquitto

  planner:
    build:
      context: ./Planner
      dockerfile: Dockerfile
    container_name: seas_planner_test
    restart: always
    #networks:
      #- test_network
    depends_on:
      - mosquitto

  executor:
    build:
      context: ./Executor
      dockerfile: Dockerfile
    container_name: seas_executor_test
    restart: always
    #networks:
     # - test_network
    depends_on:
      - mosquitto

  managed_resources:
    build:
      context: ./ManagedResources
      dockerfile: Dockerfile
    container_name: seas_resources_test
    restart: always
    #networks:
      #- test_network
    depends_on:
      - mosquitto

volumes:
  redis_data:
  grafana_data:

#networks:
  #test_network:
